{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@chriscourses/perlin-noise/index.js","webpack:///./src/js/canvas.js","webpack:///./src/js/utils.js"],"names":["x","noise","canvas","document","querySelector","c","getContext","width","innerWidth","height","innerHeight","mouse","y","colors","addEventListener","event","clientX","clientY","Circle","radius","color","distance","_classCallCheck","_createClass","key","value","draw","beginPath","arc","Math","PI","fillStyle","fill","closePath","update","circles","i","push","concat","random","time","animate","requestAnimationFrame","fillRect","forEach","circle","randomIntFromRange","min","max","floor","randomColor","length","x1","y1","x2","y2","xDist","yDist","sqrt","pow","module","exports"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,iBAAiB,oBAAoB;AACrC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjTkD;AAClD,IAAMA,CAAC,GAAGC,wEAAK,CAAC,EAAE,CAAC,EAAC;;AAE4C;AAEhE,IAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;AAC/C,IAAMC,CAAC,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;AAEjCJ,MAAM,CAACK,KAAK,GAAGC,UAAU;AACzBN,MAAM,CAACO,MAAM,GAAGC,WAAW;AAE3B,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","file":"./js/canvas.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/canvas.js\");\n","//////////////////////////////////////////////////////////////\n\n// http://mrl.nyu.edu/~perlin/noise/\n// Adapting from PApplet.java\n// which was adapted from toxi\n// which was adapted from the german demo group farbrausch\n// as used in their demo \"art\": http://www.farb-rausch.de/fr010src.zip\n\n// someday we might consider using \"improved noise\"\n// http://mrl.nyu.edu/~perlin/paper445.pdf\n// See: https://github.com/shiffman/The-Nature-of-Code-Examples-p5.js/\n//      blob/main/introduction/Noise1D/noise.js\n\n/**\n * @module Math\n * @submodule Noise\n * @for p5\n * @requires core\n */\n\nconst PERLIN_YWRAPB = 4\nconst PERLIN_YWRAP = 1 << PERLIN_YWRAPB\nconst PERLIN_ZWRAPB = 8\nconst PERLIN_ZWRAP = 1 << PERLIN_ZWRAPB\nconst PERLIN_SIZE = 4095\n\nlet perlin_octaves = 4 // default to medium smooth\nlet perlin_amp_falloff = 0.5 // 50% reduction/octave\n\nconst scaled_cosine = (i) => 0.5 * (1.0 - Math.cos(i * Math.PI))\n\nlet perlin // will be initialized lazily by noise() or noiseSeed()\n\n/**\n * Returns the Perlin noise value at specified coordinates. Perlin noise is\n * a random sequence generator producing a more naturally ordered, harmonic\n * succession of numbers compared to the standard <b>random()</b> function.\n * It was invented by Ken Perlin in the 1980s and been used since in\n * graphical applications to produce procedural textures, natural motion,\n * shapes, terrains etc.<br /><br /> The main difference to the\n * <b>random()</b> function is that Perlin noise is defined in an infinite\n * n-dimensional space where each pair of coordinates corresponds to a\n * fixed semi-random value (fixed only for the lifespan of the program; see\n * the <a href=\"#/p5/noiseSeed\">noiseSeed()</a> function). p5.js can compute 1D, 2D and 3D noise,\n * depending on the number of coordinates given. The resulting value will\n * always be between 0.0 and 1.0. The noise value can be animated by moving\n * through the noise space as demonstrated in the example above. The 2nd\n * and 3rd dimension can also be interpreted as time.<br /><br />The actual\n * noise is structured similar to an audio signal, in respect to the\n * function's use of frequencies. Similar to the concept of harmonics in\n * physics, perlin noise is computed over several octaves which are added\n * together for the final result. <br /><br />Another way to adjust the\n * character of the resulting sequence is the scale of the input\n * coordinates. As the function works within an infinite space the value of\n * the coordinates doesn't matter as such, only the distance between\n * successive coordinates does (eg. when using <b>noise()</b> within a\n * loop). As a general rule the smaller the difference between coordinates,\n * the smoother the resulting noise sequence will be. Steps of 0.005-0.03\n * work best for most applications, but this will differ depending on use.\n *\n * @method noise\n * @param  {Number} x   x-coordinate in noise space\n * @param  {Number} [y] y-coordinate in noise space\n * @param  {Number} [z] z-coordinate in noise space\n * @return {Number}     Perlin noise value (between 0 and 1) at specified\n *                      coordinates\n * @example\n * <div>\n * <code>\n * let xoff = 0.0;\n *\n * function draw() {\n *   background(204);\n *   xoff = xoff + 0.01;\n *   let n = noise(xoff) * width;\n *   line(n, 0, n, height);\n * }\n * </code>\n * </div>\n * <div>\n * <code>let noiseScale=0.02;\n *\n * function draw() {\n *   background(0);\n *   for (let x=0; x < width; x++) {\n *     let noiseVal = noise((mouseX+x)*noiseScale, mouseY*noiseScale);\n *     stroke(noiseVal*255);\n *     line(x, mouseY+noiseVal*80, x, height);\n *   }\n * }\n * </code>\n * </div>\n *\n * @alt\n * vertical line moves left to right with updating noise values.\n * horizontal wave pattern effected by mouse x-position & updating noise values.\n */\n\nexport const noise = function(x, y = 0, z = 0) {\n  if (perlin == null) {\n    perlin = new Array(PERLIN_SIZE + 1)\n    for (let i = 0; i < PERLIN_SIZE + 1; i++) {\n      perlin[i] = Math.random()\n    }\n  }\n\n  if (x < 0) {\n    x = -x\n  }\n  if (y < 0) {\n    y = -y\n  }\n  if (z < 0) {\n    z = -z\n  }\n\n  let xi = Math.floor(x),\n    yi = Math.floor(y),\n    zi = Math.floor(z)\n  let xf = x - xi\n  let yf = y - yi\n  let zf = z - zi\n  let rxf, ryf\n\n  let r = 0\n  let ampl = 0.5\n\n  let n1, n2, n3\n\n  for (let o = 0; o < perlin_octaves; o++) {\n    let of = xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB)\n\n    rxf = scaled_cosine(xf)\n    ryf = scaled_cosine(yf)\n\n    n1 = perlin[of & PERLIN_SIZE]\n    n1 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n1)\n    n2 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE]\n    n2 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n2)\n    n1 += ryf * (n2 - n1)\n\n    of += PERLIN_ZWRAP\n    n2 = perlin[of & PERLIN_SIZE]\n    n2 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n2)\n    n3 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE]\n    n3 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n3)\n    n2 += ryf * (n3 - n2)\n\n    n1 += scaled_cosine(zf) * (n2 - n1)\n\n    r += n1 * ampl\n    ampl *= perlin_amp_falloff\n    xi <<= 1\n    xf *= 2\n    yi <<= 1\n    yf *= 2\n    zi <<= 1\n    zf *= 2\n\n    if (xf >= 1.0) {\n      xi++\n      xf--\n    }\n    if (yf >= 1.0) {\n      yi++\n      yf--\n    }\n    if (zf >= 1.0) {\n      zi++\n      zf--\n    }\n  }\n  return r\n}\n\n/**\n *\n * Adjusts the character and level of detail produced by the Perlin noise\n * function. Similar to harmonics in physics, noise is computed over\n * several octaves. Lower octaves contribute more to the output signal and\n * as such define the overall intensity of the noise, whereas higher octaves\n * create finer grained details in the noise sequence.\n *\n * By default, noise is computed over 4 octaves with each octave contributing\n * exactly half than its predecessor, starting at 50% strength for the 1st\n * octave. This falloff amount can be changed by adding an additional function\n * parameter. Eg. a falloff factor of 0.75 means each octave will now have\n * 75% impact (25% less) of the previous lower octave. Any value between\n * 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n * result in greater than 1.0 values returned by <b>noise()</b>.\n *\n * By changing these parameters, the signal created by the <b>noise()</b>\n * function can be adapted to fit very specific needs and characteristics.\n *\n * @method noiseDetail\n * @param {Number} lod number of octaves to be used by the noise\n * @param {Number} falloff falloff factor for each octave\n * @example\n * <div>\n * <code>\n * let noiseVal;\n * let noiseScale = 0.02;\n *\n * function setup() {\n *   createCanvas(100, 100);\n * }\n *\n * function draw() {\n *   background(0);\n *   for (let y = 0; y < height; y++) {\n *     for (let x = 0; x < width / 2; x++) {\n *       noiseDetail(2, 0.2);\n *       noiseVal = noise((mouseX + x) * noiseScale, (mouseY + y) * noiseScale);\n *       stroke(noiseVal * 255);\n *       point(x, y);\n *       noiseDetail(8, 0.65);\n *       noiseVal = noise(\n *         (mouseX + x + width / 2) * noiseScale,\n *         (mouseY + y) * noiseScale\n *       );\n *       stroke(noiseVal * 255);\n *       point(x + width / 2, y);\n *     }\n *   }\n * }\n * </code>\n * </div>\n *\n * @alt\n * 2 vertical grey smokey patterns affected my mouse x-position and noise.\n */\nexport const noiseDetail = function(lod, falloff) {\n  if (lod > 0) {\n    perlin_octaves = lod\n  }\n  if (falloff > 0) {\n    perlin_amp_falloff = falloff\n  }\n}\n\n/**\n * Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\n * produces different results each time the program is run. Set the\n * <b>value</b> parameter to a constant to return the same pseudo-random\n * numbers each time the software is run.\n *\n * @method noiseSeed\n * @param {Number} seed   the seed value\n * @example\n * <div>\n * <code>let xoff = 0.0;\n *\n * function setup() {\n *   noiseSeed(99);\n *   stroke(0, 10);\n * }\n *\n * function draw() {\n *   xoff = xoff + .01;\n *   let n = noise(xoff) * width;\n *   line(n, 0, n, height);\n * }\n * </code>\n * </div>\n *\n * @alt\n * vertical grey lines drawing in pattern affected by noise.\n */\nexport const noiseSeed = function(seed) {\n  // Linear Congruential Generator\n  // Variant of a Lehman Generator\n  const lcg = (() => {\n    // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n    // m is basically chosen to be large (as it is the max period)\n    // and for its relationships to a and c\n    const m = 4294967296\n    // a - 1 should be divisible by m's prime factors\n    const a = 1664525\n    // c and m should be co-prime\n    const c = 1013904223\n    let seed, z\n    return {\n      setSeed(val) {\n        // pick a random seed if val is undefined or null\n        // the >>> 0 casts the seed to an unsigned 32-bit integer\n        z = seed = (val == null ? Math.random() * m : val) >>> 0\n      },\n      getSeed() {\n        return seed\n      },\n      rand() {\n        // define the recurrence relationship\n        z = (a * z + c) % m\n        // return a float in [0, 1)\n        // if z = m then z / m = 0 therefore (z % m) / m < 1 always\n        return z / m\n      }\n    }\n  })()\n\n  lcg.setSeed(seed)\n  perlin = new Array(PERLIN_SIZE + 1)\n  for (let i = 0; i < PERLIN_SIZE + 1; i++) {\n    perlin[i] = lcg.rand()\n  }\n}\n","import { noise } from '@chriscourses/perlin-noise'\nconst x = noise(10) // returns value 0-1\n\nimport utils, { randomColor, randomIntFromRange } from './utils'\n\nconst canvas = document.querySelector('canvas')\nconst c = canvas.getContext('2d')\n\ncanvas.width = innerWidth\ncanvas.height = innerHeight\n\nconst mouse = {\n  x: innerWidth / 2,\n  y: innerHeight / 2\n}\n\nconst colors = ['#0FC2C0','#0CABA8', '#008F8C', '#015958', '#023535']\n\n// Event Listeners\naddEventListener('mousemove', (event) => {\n  mouse.x = event.clientX\n  mouse.y = event.clientY\n})\n\naddEventListener('resize', () => {\n  canvas.width = innerWidth\n  canvas.height = innerHeight\n})\n\n// Objects\nclass Circle {\n  constructor(x, y, radius, color, distance) {\n    this.x = x\n    this.y = y\n    this.radius = radius\n    this.color = color\n    this.distance = distance\n  }\n\n  draw() {\n    c.beginPath();\n    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    c.fillStyle = this.color;\n    c.fill();\n    c.closePath();\n  }\n\n  update() {\n    this.draw();\n  }\n\n}\n\n// Implementation\nlet circles = []\nlet i = 0;\nfor ( i = 0; i < 200; i++)\n{\n  circles.push(new Circle(-10, 0, 30, `hsl(${Math.random() * 255}, 50%, 50%)`, i/100));\n}\nlet time = 0;\n// Animation Loop\nfunction animate() {\n  requestAnimationFrame(animate)\n  c.fillStyle = `rgba(0, 0, 0, 0.08)`\n  c.fillRect(0, 0, canvas.width, canvas.height);\n\n  circles.forEach(circle => {\n    circle.y = noise(time + circle.distance + 20) * canvas.height;\n    circle.x = noise(time + circle.distance) * canvas.width;\n    circle.update();\n  })\n    time += 0.005;\n    i++;\n}\n\nanimate()\n\n","function randomIntFromRange(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nfunction randomColor(colors) {\n  return colors[Math.floor(Math.random() * colors.length)]\n}\n\nfunction distance(x1, y1, x2, y2) {\n  const xDist = x2 - x1\n  const yDist = y2 - y1\n\n  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2))\n}\n\nmodule.exports = { randomIntFromRange, randomColor, distance }\n"],"sourceRoot":""}